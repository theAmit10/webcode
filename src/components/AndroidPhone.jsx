/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: DatSketch (https://sketchfab.com/DatSketch)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/samsung-galaxy-z-flip-3-112947cbab7a4f708d0d01adb7d3fa3d
Title: Samsung Galaxy Z Flip 3
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";

function ModelAndroid(props) {
  const { nodes, materials } = useGLTF("/models/androidphone.glb");

  const texture = useTexture(props.item.img);

  useEffect(() => {
    Object.entries(materials).map((material) => {
      // these are the material names that can't be changed color
      if (
        material[0] !== "zFdeDaGNRwzccye" &&
        material[0] !== "ujsvqBWRMnqdwPx" &&
        material[0] !== "hUlRcbieVuIiOXG" &&
        material[0] !== "jlzuBkUzuJqgiAK" &&
        material[0] !== "xNrofRCqOXXHVZt"
      ) {
        material[1].color = new THREE.Color(props.item.color[0]);
      }
      material[1].needsUpdate = true;
    });
  }, [materials, props.item]);



  return (
    <group {...props} dispose={null}>
      <group
        position={[-0.005, -0.015, -0.015]}
        rotation={[-Math.PI, 0, -Math.PI]}
      >
        <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_metal_0.geometry}
              material={materials.metal}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_SpeakerMic_0.geometry}
              material={materials.SpeakerMic}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_back_0.geometry}
              material={materials.back}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_Line_0.geometry}
              material={materials.Line}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_Plastic_0.geometry}
              material={materials.Plastic}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_cameraBack_0.geometry}
              material={materials.cameraBack}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_Screen_0.geometry}
              material={materials.Screen}
            >
              <meshStandardMaterial
                roughness={1}
                metalness={0.5}
                map={texture}
                toneMapped={false}
                attach="material"
                map-minFilter={THREE.LinearFilter}
                map-magFilter={THREE.LinearFilter}
                map-wrapS={THREE.RepeatWrapping}
                map-wrapT={THREE.RepeatWrapping}
              />
             
            </mesh>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_CameraGrayMatte_0.geometry}
              material={materials.CameraGrayMatte}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_CameraGlass_0.geometry}
              material={materials.CameraGlass}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_CameraLens_0.geometry}
              material={materials.CameraLens}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_PortBlack_0.geometry}
              material={materials.PortBlack}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_PortYellow_0.geometry}
              material={materials.PortYellow}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_Flash_0.geometry}
              material={materials.Flash}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_Glass_0.geometry}
              material={materials.Glass}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Camera_CameraMetal_0.geometry}
              material={materials.CameraMetal}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Camera_CameraMetalGray_0.geometry}
              material={materials.CameraMetalGray}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Camera_CameraBlackMatte_0.geometry}
              material={materials.CameraBlackMatte}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Camera_CameraGrayMatte_0.geometry}
              material={materials.CameraGrayMatte}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Camera_CameraLens_0.geometry}
              material={materials.CameraLens}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Camera_CameraGlass_0.geometry}
              material={materials.CameraGlass}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

export default ModelAndroid;

useGLTF.preload("/models/androidphone.glb");
